matplot(x, y, pch = 1, ylim = c(2, 8), col = "blue")
abline(v = 1:5, h = 1:9, col = gray(0.8), lty = 2)
y <- c(1, 2, 4, 3, 5)
x <- c(1, 2, 3, 4, 5)
mean(y)
d <- data.frame(x, y)
library(knitr)
kable(d)
matplot(x, y, pch = 1, col = "blue")
abline(v = 1:5, h = 1:9, col = gray(0.8), lty = 2)
?gray
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
# カラーパレット
library(viridis)
install.packages("viridis")
# カラーパレット
library(viridis)
COL <- rainbow(nc)
# カラーパレット
library(RColorBrewer)
display.brewer.all()
COL <- rainbow(nc)
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
# カラーパレット
#COL <- rainbow(nc)
COL <- c("blue", "red", "purple")
library("colorspace")
pal <- choose_pallete()
install.packages("colorspace")
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
# カラーパレット
#COL <- rainbow(nc)
COL <- c("blue", "red", "purple")
library("colorspace")
pal <- choose_pallete()
choose_pallete()
install.packages("colorspace")
install.packages(c("datawizard", "rmarkdown"))
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
library("colorspace")
pal <- choose_pallete()
pal <- choose_palete()
# カラーパレット
#COL <- rainbow(nc)
COL <- c("blue", "red", "purple")
library("colorspace")
pal <- choose_palette()
```
?colors
?rgb
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
LAB.MODELS <- c("Model1", "Model2")
tab_model(fit1, fit2, dv.labels = LAB.MODELS)
matplot(x, y, pch = 1)
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
?grid
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
# 枠
matplot(d,
type = "n", xaxt = "n", # プロット，x軸を表示しない．
main = '2021-05-01と2022-05-01の毎時電力使用量',
xlab = '５月１日',
ylab = '電力使用量［万kW］')
# x軸
at.x <- seq(1, nr, 2)
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
d1 <- read.csv("電力使用量_2021-05-01.csv")
d2 <- read.csv("電力使用量_2022-05-01.csv")
head(d1)
head(d2)
d <- data.frame(y1 = d1$mankw,
y2 = d2$mankw)
# 時刻 (format > ?strptime）
Sys.setlocale("LC_TIME", "ja_JP.UTF-8")
rownames(d) <- ct <- as.POSIXct(paste(d1$date, d1$time),
format = "%Y/%m/%d %H:%M", tz = "Japan")
nr <- nrow(d)
nc <- ncol(d)
head(d)
library(knitr)
kable(d)
summary(d)
# カラーパレット
# (https://www.rapidtables.com/web/color/RGB_Color.html)
COL <- c(rgb(255,   0,   0,  255, max = 255), # 赤
rgb(  0,   0, 255,  255, max = 255), # 青
rgb(  0, 155,   0,  255, max = 255)) # 緑
# 枠
matplot(d,
type = "n", xaxt = "n", # プロット，x軸を表示しない．
main = '2021-05-01と2022-05-01の毎時電力使用量',
xlab = '５月１日',
ylab = '電力使用量［万kW］')
# x軸
at.x <- seq(1, nr, 2)
axis(1, at = at.x, labels = format(ct, "%H:%M")[at.x])
# 罫線
#abline(h = seq(0, 6000, 200), v = seq(), lty = 2, col = gray(.5, .25))
grid(nx = nr/4)
# プロット
matlines(d$y1, type = "o", pch = 1, lty = 1, col = COL[1])
matlines(d$y2, type = "o", pch = 2, lty = 2, col = COL[2])
# 凡例
legend('topleft', col = COL, pch = 1:nc, lty = 1:nc,
legend = c('Y2021', 'Y2022'))
nr
ct[at.x]
aic(fit1)
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
x <- c(1, 2, 3, 4, 5)
y <- c(2, 2, 4, 3, 5)
x <- 1:100
b0 <- 20
b1 <- 1.2
e <- rnorm(length(x), sd = 10)
y <- b0 + b1 * x + e
d <- data.frame(x, y)
#library(knitr)
#kable(d)
summary(d)
# カラーパレット
# (https://www.rapidtables.com/web/color/RGB_Color.html)
COL <- c(rgb(255,   0,   0,  255, max = 255), # 赤
rgb(  0,   0, 255,  255, max = 255), # 青
rgb(  0, 155,   0,  255, max = 255)) # 緑
matplot(x, y, pch = 1)
grid()
options(digits = 2)
b <- sum(x * y) / sum(x * x)
fit1 <- lm(y ~ x - 1, data = d)
summary(fit1)
matplot(x, y, pch = 1)
matlines(x, fit1$fitted, col = COL[1])
grid()
n <- nrow(d)
xbar <- mean(x)
ybar <- mean(y)
b1 <- (sum(x * y) - n * xbar * ybar) / (sum(x * x) - n * xbar^2)
b0 <- ybar - b1 * xbar
fit2 <- lm(y ~ x, data = d)
summary(fit2)
matplot(x, y, pch = 1)
matlines(x, fit2$fitted, col = COL[2])
grid()
library(sjPlot)
library(sjmisc)
library(sjlabelled)
tab_model(fit1, fit2, dv.labels = c("Model1", "Model2"))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
aic(fit1)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
tab_model(fit1, fit2, dv.labels = c("Model1", "Model2"))
AIC(fit1, fit2)
BIC(fit1, fit2)
RMSE <- sqrt(sum(y - fit1$fitted)^2))
library(sjPlot)
library(sjmisc)
library(sjlabelled)
tab_model(fit1, fit2, dv.labels = c("Model1", "Model2"))
AIC(fit1, fit2)
BIC(fit1, fit2)
RMSE <- sqrt(sum(y - fit1$fitted)^2)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
tab_model(fit1, fit2, dv.labels = c("Model1", "Model2"))
AIC(fit1, fit2)
BIC(fit1, fit2)
(RMSE1 <- sqrt(sum(y - fit1$fitted)^2))
(RMSE2 <- sqrt(sum(y - fit2$fitted)^2))
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
cor(x, y)
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
x <- 1:30
n <- length(x)
b0 <- 20
b1 <- 1.2
e <- rnorm(n, mean = 0, sd = 5)
y <- b0 + b1 * x + e
# Test data
#x <- c(1, 2, 3, 4, 5)
#y <- c(2, 2, 4, 3, 5)
d <- data.frame(x, y)
summary(d)
# カラーパレット
# (https://www.rapidtables.com/web/color/RGB_Color.html)
COL <- c(rgb(255,   0,   0,  255, max = 255), # 赤
rgb(  0,   0, 255,  255, max = 255), # 青
rgb(  0, 155,   0,  255, max = 255)) # 緑
matplot(x, y, pch = 1)
grid()
options(digits = 3)
b <- sum(x * y) / sum(x * x)
cor(x, y)
RSS = sum((y - b * x)^2)
TSS = sum((y - mean(y))^2)
R2 = 1 - RSS/TSS
R2
fit1 <- lm(y ~ x - 1, data = d)
summary(fit1)
matplot(x, y, pch = 1)
matlines(x, fit1$fitted, col = COL[1])
grid()
n <- nrow(d)
xbar <- mean(x)
ybar <- mean(y)
b1 <- (sum(x * y) - n * xbar * ybar) / (sum(x * x) - n * xbar^2)
b0 <- ybar - b1 * xbar
fit2 <- lm(y ~ x, data = d)
summary(fit2)
matplot(x, y, pch = 1)
matlines(x, fit2$fitted, col = COL[2])
grid()
library(sjPlot)
library(sjmisc)
library(sjlabelled)
tab_model(fit1, fit2, dv.labels = c("Model1", "Model2"))
AIC(fit1, fit2)
BIC(fit1, fit2)
(RMSE1 <- sqrt(mean((y - fit1$fitted)^2)))
(RMSE2 <- sqrt(mean((y - fit2$fitted)^2)))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
options(digits = 3)
b <- sum(x * y) / sum(x * x)
cor(x, y)^2
RSS = sum((y - b * x)^2)
TSS = sum((y - mean(y))^2)
R2 = 1 - RSS/TSS
R2
options(digits = 3)
b <- sum(x * y) / sum(x * x)
cor(x, y)^2
RSS = sum((y - b * x)^2)
TSS = sum((y - mean(y))^2)
R2 = RSS/TSS
R2
n <- nrow(d)
xbar <- mean(x)
ybar <- mean(y)
b1 <- (sum(x * y) - n * xbar * ybar) / (sum(x * x) - n * xbar^2)
b0 <- ybar - b1 * xbar
RSS = sum((y - b1 + b2 * x)^2)
n <- nrow(d)
xbar <- mean(x)
ybar <- mean(y)
b1 <- (sum(x * y) - n * xbar * ybar) / (sum(x * x) - n * xbar^2)
b0 <- ybar - b1 * xbar
RSS = sum((y - b0 + b1 * x)^2)
TSS = sum((y - mean(y))^2)
R2 = RSS/TSS
R2
?rmse
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(20, 30, paste("RMSE1 = ", RMSE1))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(20, 30, sprintf("RMSE1 = %1.2f", RMSE1))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(20, 30, sprintf("RMSE1 = %1.2f", RMSE1))
text(20, 20, sprintf("RMSE2 = %1.2f", RMSE2))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
?text
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(20, 30, adj = 0, sprintf("RMSE1 = %1.2f", RMSE1))
text(20, 20, adj = 0, sprintf("RMSE2 = %1.2f", RMSE2))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(10, 15, adj = 0, sprintf("RMSE1 = %1.2f", RMSE1))
text(0, 40, adj = 0, sprintf("RMSE2 = %1.2f", RMSE2))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(15, 15, adj = 0, sprintf("RMSE1 = %1.2f", RMSE1))
text(0, 40, adj = 0, sprintf("RMSE2 = %1.2f", RMSE2))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(10, 15, adj = 0, sprintf("RMSE1 = %1.2f", RMSE1))
text(5, 40, adj = 0, sprintf("RMSE2 = %1.2f", RMSE2))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(10, 15, adj = 0, sprintf("RMSE1 = %1.2f", RMSE1))
text(3, 35, adj = 0, sprintf("RMSE2 = %1.2f", RMSE2))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
text(8, 15, adj = 0, sprintf("RMSE1 = %1.2f", RMSE1))
text(3, 35, adj = 0, sprintf("RMSE2 = %1.2f", RMSE2))
library(latex2exp)
legend("topleft", lty = 1, col = COL,
legend = c(TeX("Model1: $\\hat{y} = \\beta x$"),
TeX("Model2: $\\hat{y} = \\beta_0 + \\beta_1 x$")))
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
x <- 1:30
n <- length(x)
b0 <- 20
b1 <- 1.2
set.seed(2)
e <- rnorm(n, mean = 0, sd = 5)
y <- b0 + b1 * x + e
ybar <- mean(y)
# Test data
#x <- c(1, 2, 3, 4, 5)
#y <- c(2, 2, 4, 3, 5)
d <- data.frame(x, y)
str(d)
summary(d)
# カラーパレット
# (https://www.rapidtables.com/web/color/RGB_Color.html)
COL <- c(rgb(255,   0,   0,  255, max = 255), # 赤
rgb(  0,   0, 255,  255, max = 255), # 青
rgb(  0, 155,   0,  255, max = 255)) # 緑
matplot(x, y, pch = 1)
grid()
options(digits = 3)
b <- sum(x * y) / sum(x * x)
yhat <- b * x
RSS = sum((y - yhat)^2)
TSS = sum(y^2)
R2 = 1 - RSS/TSS
cor(y, yhat)^2
fit1 <- lm(y ~ x - 1, data = d)
sum(yhat - fit1$fitted)
summary(fit1)
matplot(x, y, pch = 1)
matlines(x, fit1$fitted, col = COL[1])
grid()
n <- nrow(d)
xbar <- mean(x)
ybar <- mean(y)
b1 <- (sum(x * y) - n * xbar * ybar) / (sum(x * x) - n * xbar^2)
b0 <- ybar - b1 * xbar
yhat <- b0 + b1 * x
RSS = sum((y - yhat)^2)
TSS = sum((y - mean(y))^2)
R2 = 1 - RSS/TSS
cor(y, yhat)^2
fit2 <- lm(y ~ x, data = d)
summary(fit2)
matplot(x, y, pch = 1)
matlines(x, fit2$fitted, col = COL[2])
grid()
library(sjPlot)
library(sjmisc)
library(sjlabelled)
tab_model(fit1, fit2, dv.labels = c("Model1", "Model2"))
(RMSE1 <- sqrt(mean((y - fit1$fitted)^2)))
(RMSE2 <- sqrt(mean((y - fit2$fitted)^2)))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
library(latex2exp)
text(10, 20, adj = 0, TeX(sprintf("$RMSE_1 = %1.2f$", RMSE1)))
text( 3, 35, adj = 0, TeX(sprintf("$RMSE_2 = %1.2f$", RMSE2)))
legend("topleft", lty = 1, col = COL,
legend = c(TeX("$Model_1(\\hat{y} = \\beta x)$"),
TeX("$Model_2(\\hat{y} = \\beta_0 + \\beta_1 x)$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
library(latex2exp)
text(10, 20, adj = 0, TeX(sprintf("$RMSE_1 = %1.2f$", RMSE1)))
text( 3, 35, adj = 0, TeX(sprintf("$RMSE_2 = %1.2f$", RMSE2)))
legend("topleft", lty = 1, col = COL,
legend = c(TeX("$Model_1 (\\hat{y} = \\beta x)$"),
TeX("$Model_2 (\\hat{y} = \\beta_0 + \\beta_1 x)$")))
matplot(x, y, pch = 1)
grid()
matlines(x, fit1$fitted, col = COL[1])
matlines(x, fit2$fitted, col = COL[2])
library(latex2exp)
text(10, 20, adj = 0, TeX(sprintf("$RMSE_1 = %1.2f$", RMSE1)))
text( 3, 35, adj = 0, TeX(sprintf("$RMSE_2 = %1.2f$", RMSE2)))
legend("topleft", lty = 1, col = COL,
legend = c(TeX("$Model_1 ( \\hat{y} = \\beta x )$"),
TeX("$Model_2 ( \\hat{y} = \\beta_0 + \\beta_1 x )$")))
str(fit1)
(RMSE1 <- sqrt(mean((y - fit1$fitted)^2)))
(RMSE2 <- sqrt(mean((y - fit2$fitted)^2)))
(RSE1 <- sqrt(deviance(fit1)/df.residual(fit1))
(RSE2 <- sqrt(mean((y - fit2$fitted)^2)))
df.residual(fit1)
deviance(fit1)
(RSE1 <- sqrt(deviance(fit1)/df.residual(fit1))
(RSE1 <- sqrt(deviance(fit1)/df.residual(fit1)))
(RSE1 <- sqrt(deviance(fit1)/df.residual(fit1)))
(RMSE1 <- sqrt(mean((y - fit1$fitted)^2)))
(RMSE2 <- sqrt(mean((y - fit2$fitted)^2)))
(RSE1 <- sqrt(deviance(fit1) / df.residual(fit1)))
(RSE2 <- sqrt(deviance(fit2) / df.residual(fit2)))
summary(fit1)
str(summary(fit1))
str(fit1)
sum(fit1$resid^2)
deviance(fit1)
(RSE1 <- sqrt(sum(fit1$resid^2) / fit1$df.resid)))
(RSE1 <- sqrt(sum(fit1$resid^2) / fit1$df.resid))
(RMSE1 <- sqrt(mean((y - fit1$fitted)^2)))
(RMSE2 <- sqrt(mean((y - fit2$fitted)^2)))
(RSE1 <- sqrt(sum(fit1$resid^2) / fit1$df.resid))
(RSE2 <- sqrt(sum(fit2$resid^2) / fit2$df.resid))
