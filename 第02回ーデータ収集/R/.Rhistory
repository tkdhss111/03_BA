#
library(RSQLite)
ch <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbSendQuery(ch, 'DROP TABLE IF EXISTS tokyo')
dbSendQuery(ch,
'CREATE TABLE IF NOT EXISTS tokyo
(
site  INTEGER,
year  INTEGER,
month INTEGER,
day   INTEGER,
hour  INTEGER,
temp  INTEGER,
wind TEXT)')
dbDisconnect(ch)
ch <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbBegin(ch)
dbSendQuery(ch,
'INSERT INTO tokyo VALUES
(
:site,
:year,
:month,
:day,
:hour,
:temp,
:wind)', bind.data = d1)
dbCommit(ch)
res <- dbSendQuery(ch, 'SELECT * FROM tokyo WHERE hour = 3')
dbFetch(res)
ch <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbSendQuery(ch, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(ch, d1)
ch <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbWriteTable(ch, d1)
dbWriteTable(ch, 'tokyo', d1)
#
# Database
#
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbWriteTable(conn, 'tokyo', d1, append = T)
res <- dbSendQuery(conn, 'SELECT * FROM tokyo WHERE hour = 3')
dbFetch(res)
dbClearResult(res)
dbDisconnect(conn)
#
# Database
#
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbWriteTable(conn, 'tokyo', d1, append = T)
res <- dbSendQuery(conn, 'SELECT * FROM tokyo WHERE hour = 3')
dbFetch(res)
dbClearResult(res)
dbDisconnect(conn)
dbDisconnect(conn)
dbDropTable(conn, 'tokyo')
dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
#
# Database
#
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbWriteTable(conn, 'tokyo', d1, append = T)
dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
options(stringsAsFactors = F)
site <- 47662 # Tokyo
year     <- 2022
month    <- 8
day      <- 11
FILE.O   <- 'weather.csv' # Output filename
url <- paste0('https://www.data.jma.go.jp/obd/stats/etrn/view/hourly_s1.php?prec_no=44&block_no=', site, '&year=', year,'&month=', month,'&day=', day, '&view=')
#
# Web scraping
#
library(rvest)
tbl <- url %>% read_html() %>% html_table()
d0 <- as.data.frame(tbl[[5]]) # Weather data are stored in list 5.
str(d0)
d1 <- data.frame(site,
year,
month,
day,
hour = as.numeric(d0[-1, 1]),
temp = as.numeric(d0[-1, 5]),
wind = as.character(d0[-1, 10]))
str(d1)
#
# Output CSV file
#
library(data.table)
fwrite(d1, file = FILE.O, sep = ',', append = T)
(d2 <- fread(file = FILE.O))
str(d2)
#
# Database
#
library(RSQLite)
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
res <- dbSendQuery(conn, 'SELECT * FROM tokyo WHERE hour = 3')
dbFetch(res)
dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
#
# Database
#
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
dbClearResult(res)
dbDisconnect(conn)
dbDisconnect(conn)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
res <- dbSendQuery(conn, 'SELECT * FROM tokyo WHERE hour = 3')
lt.fr <- as.POSIXlt('2021-08-10')
lt.to <- as.POSIXlt('2021-09-10')
lts <- seq(lt.fr, lt.to, by = 'days')
year   <- lts[1]$year
lts[1]
t.fr <- '2021-08-10'
t.to <- '2021-09-10'
lts <- as.POSIXlt(seq(t.fr, t.to, by = 'days'))
seq(t.fr, t.to, by = 'days')
t.fr <- as.POSIXlt('2021-08-10')
t.to <- as.POSIXlt('2021-09-10')
lts <- as.POSIXlt(seq(t.fr, t.to, by = 'days'))
lts
lts[1]$year
year   <- 1900 + lts[1]$year
year
month  <- 1 +  + lts[1]$mon
month
day    <- lts[1]$mday
day
site   <- 47662 # Tokyo
lt.fr <- as.POSIXlt('2021-08-10')
lt.to <- as.POSIXlt('2021-09-10')
lts  <- as.POSIXlt(seq(lt.fr, lt.to, by = 'days'))
for (i in seq_a)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
dbDisconnect(conn)
dbDisconnect(conn)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
#
# Database
#
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
dbDisconnect(conn)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db', synchronous = NULL)
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
res <- dbSendQuery(conn, 'SELECT * FROM tokyo WHERE hour = 3')
dbFetch(res)
dbClearResult(res)
dbDisconnect(conn)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db', synchronous = NULL)
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
res <- dbSendQuery(conn, 'SELECT * FROM tokyo WHERE hour = 3')
dbFetch(res)
dbClearResult(res)
dbDisconnect(conn)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db', synchronous = NULL)
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbWriteTable(conn, 'tokyo', d1, append = T)
dbDisconnect(conn)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
dbDisconnect(conn)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/web_scraping.R", echo=TRUE)
tbl
str(tbl)
tbl
as.numeric(d0[-1, 1])
as.integer(d0[-1, 1])
dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
dbDisconnect(conn)
d1 <- data.frame(site,
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
str(d1)
d1 <- data.frame(site  = as.integer(site),
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
str(d1)
#
# Output CSV file
#
library(data.table)
fwrite(d1, file = FILE.O, sep = ',', append = T)
(d2 <- fread(file = FILE.O))
str(d2)
#
# Database
#
library(RSQLite)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
try(dbWriteTable(conn, 'tokyo', d1, append = T))
res <- dbSendQuery(conn, 'SELECT * FROM tokyo WHERE hour = 3')
dbFetch(res)
dbClearResult(res)
dbDisconnect(conn)
str(d0)
d1 <- data.table(site  = as.integer(site),
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
d1
str(d1)
conn <- dbConnect(RSQLite::SQLite(), 'weather.db')
#dbSendQuery(conn, 'DROP TABLE IF EXISTS tokyo')
try(dbWriteTable(conn, 'tokyo', d1, append = T))
d1$site
d1$
str(d1)
d1$
str(d1)
d1 <- data.table(site  = as.integer(site),
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
d1$
str(d1)
str(d1)
d0 <- as.data.table(tbl[[5]]) # Weather data are stored in list 5.
str(d0)
d1 <- data.table(site  = as.integer(site),
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
d0 <- as.data.table(tbl[[5]]) # Weather data are stored in list 5.
str(d0)
d1 <- data.table(site  = as.integer(site),
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
d0 <- as.data.frame(tbl[[5]]) # Weather data are stored in list 5.
str(d0)
d1 <- data.table(site  = as.integer(site),
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
d1 <- data.frame(site  = as.integer(site),
year  = as.integer(year),
month = as.integer(month),
day   = as.integer(day),
hour  = as.integer(d0[-1, 1]),
temp  = as.integer(d0[-1, 5]),
wind  = as.character(d0[-1, 10]))
str(d1)
site
name(site)
names(site)
d0 <- as.data.frame(tbl[[5]]) # 5番目のリストを取り出す．
timeslot <- as.integer(d0[-1, 1])
# 日時などの情報追加，変数の型指定，データの整形を行い，書込用テーブルを作成する．
d1 <- data.frame(site.id   = as.integer(site$id),
site.name = site$name,
date      = format(lt, '%Y-%m-%d'),
time      = as.integer(d0[-1, 1]), # -1:一行目は不要のため削除
temp      = as.integer(d0[-1, 5]),
wind      = as.character(d0[-1, 10]))
timeslot <- as.integer(d0[-1, 1])
datetime <- as.POSIXlt(paste(lt, timeslot), format = '%Y-%m-%d %H:00:00')
# 出力ファイル
DB  <- 'weather.db'  # データベース名
F.O <- 'weather.csv' # CSVファイル名
# 気象観測所
site <- data.frame(
id   = 47662,   # 番号
name = 'Tokyo') # 名称（データベースのテーブル名として使う）
# システムロケール（海外クラウド環境利用時に必要な時間と言語の設定）
Sys.setlocale("LC_TIME", "ja_JP.UTF-8")
# 対象日時（テーブル取得のためのURLに適用する日時）
lt <- as.POSIXlt('2022-08-10') # POSIX準拠ローカル時間
year  <- 1900 + lt$year
month <- 1 + lt$mon
day   <- lt$mday
url <- paste0('https://www.data.jma.go.jp/obd/stats/etrn/view/hourly_s1.php?prec_no=44&block_no=', site$id, '&year=', year, '&month=', month, '&day=', day, '&view=')
library(rvest)
tbl <- read_html(url) %>% html_table()
tbl
d0 <- as.data.frame(tbl[[5]]) # 5番目のリストを取り出す．
timeslot <- as.integer(d0[-1, 1])
datetime <- as.POSIXlt(paste(lt, timeslot), format = '%Y-%m-%d %H:00:00')
# 日時などの情報追加，変数の型指定，データの整形を行い，書込用テーブルを作成する．
d1 <- data.frame(site.id   = as.integer(site$id),
site.name = site$name,
date      = format(lt, '%Y-%m-%d'),
time      = as.integer(d0[-1, 1]), # -1:一行目は不要のため削除
temp      = as.integer(d0[-1, 5]),
wind      = as.character(d0[-1, 10]))
str(d1)
library(RSQLite)
# データベース接続
conn <- dbConnect(RSQLite::SQLite(), DB)
# 既存テーブル削除（必要に応じて実施）
dbSendQuery(conn, paste('DROP TABLE IF EXISTS', site$name))
# レコード追記書込
dbWriteTable(conn, site$name, d1, append = T)
# データ選択（ちゃんと保存されたか確認）
res <- dbSendQuery(conn, 'SELECT * FROM Tokyo WHERE wind = "南"')
# 選択結果取得
dbFetch(res)
# 選択結果解放
dbClearResult(res)
# データベース接続解除
dbDisconnect(conn)
# ファイル削除（必要に応じて実施）
file.remove(F.O)
# 追記書込
library(data.table)
fwrite(d1, file = F.O, sep = ',', append = T)
# データ取得（確認）
(d2 <- fread(file = F.O))
str(d2)
timeslot <- as.integer(d0[-1, 1])
datetime <- as.POSIXlt(paste(lt, timeslot), format = '%Y-%m-%d %H:00:00')
datetime
paste(lt, timeslot)
datetime <- as.POSIXlt(paste(lt, timeslot), format = '%Y-%m-%d %H')
datetime
?strftime
?strptime
colnames(d0)
unlink("data_acquisition_cache", recursive = TRUE)
?as.integer
knit_with_parameters("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition.Rmd")
unlink("data_acquisition_cache", recursive = TRUE)
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(lt.fr, lt.to, by = 'days')
lst
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(lt.fr, lt.to, by = 'day')
lst
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(lt.fr, lt.to, by = 'a day')
lst
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(lt.fr, lt.to, by = 'days')
lst
as.POSIXlt(lt.fr, lt.to, by = 'days')
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(lt.fr, lt.to, by = '1 day')
lst
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(lt.fr, lt.to, by = '1 day')
lst
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(seq(lt.fr, lt.to, by = '1 day'))
lst
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-02')
lst   <- as.POSIXlt(seq(lt.fr, lt.to, by = 'days'))
lst
lt.fr <- as.POSIXlt('2022-07-29')
lt.to <- as.POSIXlt('2022-08-01')
lst   <- as.POSIXlt(seq(lt.fr, lt.to, by = 'days'))
lst
lt.fr <- as.POSIXlt('2021-12-30')
lt.to <- as.POSIXlt('2022-01-01')
lst   <- as.POSIXlt(seq(lt.fr, lt.to, by = 'days'))
lst
str(d0)
colnames(d0)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
res <- dbSendQuery(conn, 'SELECT * FROM Tokyo') # データ確認
dbFetch(res)       # 選択結果取得
dbClearResult(res) # 選択結果解放
rm(list = ls())
library(rvest)
library(RSQLite)
Sys.setlocale("LC_TIME", "ja_JP.UTF-8")
DB <- 'weather_hw.db' # データベース名
# 気象観測所
site <- data.frame(
id   = 47662,   # 番号
name = 'Tokyo') # 名称（データベースのテーブル名として使う）
# 対象日時（テーブル取得のためのURLに適用する日時）
lt.fr <- as.POSIXlt('2021-12-30')
lt.to <- as.POSIXlt('2022-01-01')
lts   <- as.POSIXlt(seq(lt.fr, lt.to, by = 'days'))
conn <- dbConnect(RSQLite::SQLite(), DB) # データベース接続
#dbSendQuery(conn, paste('DROP TABLE IF EXISTS', site$name)) # 既存テーブル削除
for (i in seq_along(lts))
{
year  <- 1900 + lts[i]$year
month <- 1 + lts[i]$mon
day   <- lts[i]$mday
url <-
paste0('https://www.data.jma.go.jp/obd/stats/etrn/view/hourly_s1.php?prec_no=44&block_no=', site$id, '&year=', year, '&month=', month, '&day=', day, '&view=')
cat('URL:', url, fill = T)
tbl <- read_html(url) %>% html_table()
d0 <- as.data.frame(tbl[[5]])
str(d0)
colnames(d0)
# 日時整形
hour <- d0[-1, '時'] # 1列目は時刻1～24（-1:一行目は不要なため削除）
datetime <- as.POSIXlt(paste(lts[i], hour), format = '%Y-%m-%d %H')
# 書込用テーブル作成
d1 <- data.frame(
site.id   = as.integer(site$id), # 整数型
site.name = site$name,
datetime  = format(datetime, '%Y-%m-%d %H:00'),
temp      = as.double(d0[-1, 5]),  # 倍精度浮動小数点型
humidity  = as.integer(d0[-1, 8]), # 整数型（新規追加）
sunshine  = as.double(d0[-1, 11]), # 倍精度浮動小数点型（新規追加）
wind      = d0[-1, 10])
try(dbWriteTable(conn, site$name, d1, append = T)) # テーブル追記書込
Sys.sleep(runif(1, min = 1, max = 2)) # 【重要】システムスリープ（忘れたら0点）
}
res <- dbSendQuery(conn, 'SELECT * FROM Tokyo') # データ確認
dbFetch(res)       # 選択結果取得
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R", echo=TRUE)
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
sunshine
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
source("C:/Users/hss/0_tkd/1_hss/TIU/01_ds/03_BA/第02回ーデータ収集/R/data_acquisition_hw.R")
lt.fr <- as.POSIXlt('2021-12-30')
lt.to <- as.POSIXlt('2022-01-01')
lst   <- as.POSIXlt(seq(lt.fr, lt.to, by = 'days'))
lst
lt.fr <- as.POSIXlt('2022-07-30')
lt.to <- as.POSIXlt('2022-08-10')
lst   <- as.POSIXlt(seq(lt.fr, lt.to, by = 'days'))
lst
lt.fr <- as.POSIXlt('2022-07-30')
lt.to <- as.POSIXlt('2022-08-10')
yyyymmdd.fr <- format(lt.fr, '%Y%m%d')
lt.fr <- as.POSIXlt('2022-07-30')
lt.to <- as.POSIXlt('2022-08-10')
(date.fr <- format(lt.fr, '%Y%m%d'))
(date.to <- format(lt.fr, '%Y%m%d'))
lt.fr <- as.POSIXlt('2022-07-30')
lt.to <- as.POSIXlt('2022-08-10')
(date.fr <- format(lt.fr, '%Y%m%d'))
(date.to <- format(lt.fr, '%Y%m%d'))
url <- 'https://finance.yahoo.co.jp/quote/998407.O/history?from=20220730&to=20220810&timeFrame=d'
tbl <- read_html(url) %>% html_table()
tbl
lt.fr <- as.POSIXlt('2022-07-30')
lt.to <- as.POSIXlt('2022-08-10')
(date.fr <- format(lt.fr, '%Y%m%d'))
(date.to <- format(lt.fr, '%Y%m%d'))
url <- 'https://finance.yahoo.co.jp/quote/998407.O/history?from=20220730&to=20220810&timeFrame=d'
tbl <- read_html(url) %>% html_table()
tbl
lt.fr <- as.POSIXlt('2022-07-30')
lt.to <- as.POSIXlt('2022-08-10')
(date.fr <- format(lt.fr, '%Y%m%d'))
(date.to <- format(lt.fr, '%Y%m%d'))
url <- 'https://finance.yahoo.com/quote/NIY%3DF/history?period1=1659052800&period2=1659398400&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true'
tbl <- read_html(url) %>% html_table()
tbl
